import './web.url.a4d8e4d4.js';
import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, o as onMount, b as binding_callbacks, a as bind, c as space, e as element, t as text, f as create_component, q as query_selector_all, g as detach_dev, h as claim_space, j as claim_element, k as children, l as claim_text, m as claim_component, n as add_location, p as attr_dev, r as insert_dev, u as append_dev, w as mount_component, x as add_flush_callback, y as transition_in, z as transition_out, A as destroy_component } from './client.3f574b17.js';
import { M as Markmap_1 } from './markmap.52109bff.js';
import { F as Footer } from './footer.25f1252e.js';

/* src/routes/index.svelte generated by Svelte v3.29.4 */
const file = "src/routes/index.svelte";

function create_fragment(ctx) {
	let t0;
	let main;
	let h1;
	let em0;
	let t1;
	let t2;
	let h2;
	let em1;
	let t3;
	let t4;
	let em2;
	let t5;
	let t6;
	let markmap;
	let updating_mm;
	let t7;
	let p0;
	let strong;
	let t8;
	let t9;
	let p1;
	let a0;
	let t10;
	let t11;
	let p2;
	let a1;
	let t12;
	let t13;
	let sup;
	let t14;
	let t15;
	let footer;
	let current;

	function markmap_mm_binding(value) {
		/*markmap_mm_binding*/ ctx[2].call(null, value);
	}

	let markmap_props = {
		content: /*content*/ ctx[1],
		style: "width: 100%; height: 300px"
	};

	if (/*mm*/ ctx[0] !== void 0) {
		markmap_props.mm = /*mm*/ ctx[0];
	}

	markmap = new Markmap_1({ props: markmap_props, $$inline: true });
	binding_callbacks.push(() => bind(markmap, "mm", markmap_mm_binding));
	footer = new Footer({ $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			main = element("main");
			h1 = element("h1");
			em0 = element("em");
			t1 = text("markmap");
			t2 = space();
			h2 = element("h2");
			em1 = element("em");
			t3 = text("mark");
			t4 = text("down + mind");
			em2 = element("em");
			t5 = text("map");
			t6 = space();
			create_component(markmap.$$.fragment);
			t7 = space();
			p0 = element("p");
			strong = element("strong");
			t8 = text("Visualize your Markdown with mindmaps");
			t9 = space();
			p1 = element("p");
			a0 = element("a");
			t10 = text("Try it out →");
			t11 = space();
			p2 = element("p");
			a1 = element("a");
			t12 = text("Try markmap in VSCode");
			t13 = space();
			sup = element("sup");
			t14 = text("NEW");
			t15 = space();
			create_component(footer.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-14oh7yw\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			main = claim_element(nodes, "MAIN", { class: true });
			var main_nodes = children(main);
			h1 = claim_element(main_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			em0 = claim_element(h1_nodes, "EM", {});
			var em0_nodes = children(em0);
			t1 = claim_text(em0_nodes, "markmap");
			em0_nodes.forEach(detach_dev);
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(main_nodes);
			h2 = claim_element(main_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			em1 = claim_element(h2_nodes, "EM", {});
			var em1_nodes = children(em1);
			t3 = claim_text(em1_nodes, "mark");
			em1_nodes.forEach(detach_dev);
			t4 = claim_text(h2_nodes, "down + mind");
			em2 = claim_element(h2_nodes, "EM", {});
			var em2_nodes = children(em2);
			t5 = claim_text(em2_nodes, "map");
			em2_nodes.forEach(detach_dev);
			h2_nodes.forEach(detach_dev);
			t6 = claim_space(main_nodes);
			claim_component(markmap.$$.fragment, main_nodes);
			t7 = claim_space(main_nodes);
			p0 = claim_element(main_nodes, "P", {});
			var p0_nodes = children(p0);
			strong = claim_element(p0_nodes, "STRONG", {});
			var strong_nodes = children(strong);
			t8 = claim_text(strong_nodes, "Visualize your Markdown with mindmaps");
			strong_nodes.forEach(detach_dev);
			p0_nodes.forEach(detach_dev);
			t9 = claim_space(main_nodes);
			p1 = claim_element(main_nodes, "P", {});
			var p1_nodes = children(p1);
			a0 = claim_element(p1_nodes, "A", { href: true });
			var a0_nodes = children(a0);
			t10 = claim_text(a0_nodes, "Try it out →");
			a0_nodes.forEach(detach_dev);
			p1_nodes.forEach(detach_dev);
			t11 = claim_space(main_nodes);
			p2 = claim_element(main_nodes, "P", {});
			var p2_nodes = children(p2);

			a1 = claim_element(p2_nodes, "A", {
				href: true,
				target: true,
				rel: true,
				"data-ga-label": true
			});

			var a1_nodes = children(a1);
			t12 = claim_text(a1_nodes, "Try markmap in VSCode");
			a1_nodes.forEach(detach_dev);
			t13 = claim_space(p2_nodes);
			sup = claim_element(p2_nodes, "SUP", { class: true });
			var sup_nodes = children(sup);
			t14 = claim_text(sup_nodes, "NEW");
			sup_nodes.forEach(detach_dev);
			p2_nodes.forEach(detach_dev);
			main_nodes.forEach(detach_dev);
			t15 = claim_space(nodes);
			claim_component(footer.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "markmap";
			add_location(em0, file, 30, 38, 515);
			attr_dev(h1, "class", "text-6xl font-bold mb-2");
			add_location(h1, file, 30, 2, 479);
			add_location(em1, file, 31, 54, 591);
			add_location(em2, file, 31, 78, 615);
			attr_dev(h2, "class", "text-3xl font-medium mb-2 text-gray-500");
			add_location(h2, file, 31, 2, 539);
			add_location(strong, file, 35, 5, 720);
			add_location(p0, file, 35, 2, 717);
			attr_dev(a0, "href", "repl");
			add_location(a0, file, 36, 5, 784);
			add_location(p1, file, 36, 2, 781);
			attr_dev(a1, "href", "https://marketplace.visualstudio.com/items?itemName=gera2ld.markmap-vscode");
			attr_dev(a1, "target", "_blank");
			attr_dev(a1, "rel", "noreferrer noopener");
			attr_dev(a1, "data-ga-label", "markmapVSCodeFromIndex");
			add_location(a1, file, 37, 5, 830);
			attr_dev(sup, "class", "text-red-600 italic");
			add_location(sup, file, 37, 197, 1022);
			add_location(p2, file, 37, 2, 827);
			attr_dev(main, "class", "home inner");
			add_location(main, file, 29, 0, 451);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, main, anchor);
			append_dev(main, h1);
			append_dev(h1, em0);
			append_dev(em0, t1);
			append_dev(main, t2);
			append_dev(main, h2);
			append_dev(h2, em1);
			append_dev(em1, t3);
			append_dev(h2, t4);
			append_dev(h2, em2);
			append_dev(em2, t5);
			append_dev(main, t6);
			mount_component(markmap, main, null);
			append_dev(main, t7);
			append_dev(main, p0);
			append_dev(p0, strong);
			append_dev(strong, t8);
			append_dev(main, t9);
			append_dev(main, p1);
			append_dev(p1, a0);
			append_dev(a0, t10);
			append_dev(main, t11);
			append_dev(main, p2);
			append_dev(p2, a1);
			append_dev(a1, t12);
			append_dev(p2, t13);
			append_dev(p2, sup);
			append_dev(sup, t14);
			insert_dev(target, t15, anchor);
			mount_component(footer, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const markmap_changes = {};

			if (!updating_mm && dirty & /*mm*/ 1) {
				updating_mm = true;
				markmap_changes.mm = /*mm*/ ctx[0];
				add_flush_callback(() => updating_mm = false);
			}

			markmap.$set(markmap_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(markmap.$$.fragment, local);
			transition_in(footer.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(markmap.$$.fragment, local);
			transition_out(footer.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(main);
			destroy_component(markmap);
			if (detaching) detach_dev(t15);
			destroy_component(footer, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);
	let mm;

	const content = `\
# markmap

- beautiful
- useful
- easy
- interactive
`;

	onMount(() => {
		mm.svg.on("wheel.zoom", null).on("dblclick.zoom", null).on("mousedown.zoom", null).on("touchstart.zoom", null);
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	function markmap_mm_binding(value) {
		mm = value;
		$$invalidate(0, mm);
	}

	$$self.$capture_state = () => ({ onMount, Markmap: Markmap_1, Footer, mm, content });

	$$self.$inject_state = $$props => {
		if ("mm" in $$props) $$invalidate(0, mm = $$props.mm);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [mm, content, markmap_mm_binding];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
